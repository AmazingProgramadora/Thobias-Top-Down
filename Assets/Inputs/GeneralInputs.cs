//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/GeneralInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GeneralInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GeneralInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GeneralInputs"",
    ""maps"": [
        {
            ""name"": ""PlayableCharacterInputs"",
            ""id"": ""4f49ed33-765c-4088-81f6-b8e6c84f06fc"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""01c1f6f6-b220-4df4-8a01-d0b4c13c26b5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""9ee863cd-28fc-42d8-9d15-c028d416a744"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""4c095640-a935-44cb-a1de-d463bc1fdbe1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""fc5023d0-57cf-4c16-a820-6462f7979802"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a8699eec-0bae-4478-ae6b-bee9ce1f5913"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8abcfb83-6497-4bf6-b207-f2211961a5fc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f9f78f2f-de59-4f56-846a-87817a480046"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b946af76-1a5e-4b1c-8736-d7c2683e93e4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""899603fb-8e3d-45f2-9872-9f5a402f137d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a176b729-4669-4a48-a6b1-162c64f7d527"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7026942f-370c-4a2c-bee6-8ff86aaa93cd"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""539e4665-a896-4525-9aa6-b7b8bb3d7bf2"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1f348e2a-09e3-4120-85e2-ab8925a1e6a7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""34e399cc-8844-414b-b1cc-c7288a27219e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""343c41cd-3aa7-4f4a-9642-37eec46b2997"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Actions"",
            ""id"": ""3dca6211-191c-49d3-884b-bc8d633b0223"",
            ""actions"": [
                {
                    ""name"": ""SwitchingCameras"",
                    ""type"": ""Button"",
                    ""id"": ""3d12d39b-0036-427d-b975-d536a944ff6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""235b3222-51fa-4951-843e-f25ed8a0edb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cc0cc27f-c7c1-49fa-a90b-7e9bdb9659d5"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchingCameras"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b6858a3-fe40-42ae-8354-a03df0e8fa70"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayableCharacterInputs
        m_PlayableCharacterInputs = asset.FindActionMap("PlayableCharacterInputs", throwIfNotFound: true);
        m_PlayableCharacterInputs_Movement = m_PlayableCharacterInputs.FindAction("Movement", throwIfNotFound: true);
        m_PlayableCharacterInputs_Grab = m_PlayableCharacterInputs.FindAction("Grab", throwIfNotFound: true);
        m_PlayableCharacterInputs_Interact = m_PlayableCharacterInputs.FindAction("Interact", throwIfNotFound: true);
        // Actions
        m_Actions = asset.FindActionMap("Actions", throwIfNotFound: true);
        m_Actions_SwitchingCameras = m_Actions.FindAction("SwitchingCameras", throwIfNotFound: true);
        m_Actions_Pause = m_Actions.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayableCharacterInputs
    private readonly InputActionMap m_PlayableCharacterInputs;
    private IPlayableCharacterInputsActions m_PlayableCharacterInputsActionsCallbackInterface;
    private readonly InputAction m_PlayableCharacterInputs_Movement;
    private readonly InputAction m_PlayableCharacterInputs_Grab;
    private readonly InputAction m_PlayableCharacterInputs_Interact;
    public struct PlayableCharacterInputsActions
    {
        private @GeneralInputs m_Wrapper;
        public PlayableCharacterInputsActions(@GeneralInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayableCharacterInputs_Movement;
        public InputAction @Grab => m_Wrapper.m_PlayableCharacterInputs_Grab;
        public InputAction @Interact => m_Wrapper.m_PlayableCharacterInputs_Interact;
        public InputActionMap Get() { return m_Wrapper.m_PlayableCharacterInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayableCharacterInputsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayableCharacterInputsActions instance)
        {
            if (m_Wrapper.m_PlayableCharacterInputsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayableCharacterInputsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayableCharacterInputsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayableCharacterInputsActionsCallbackInterface.OnMovement;
                @Grab.started -= m_Wrapper.m_PlayableCharacterInputsActionsCallbackInterface.OnGrab;
                @Grab.performed -= m_Wrapper.m_PlayableCharacterInputsActionsCallbackInterface.OnGrab;
                @Grab.canceled -= m_Wrapper.m_PlayableCharacterInputsActionsCallbackInterface.OnGrab;
                @Interact.started -= m_Wrapper.m_PlayableCharacterInputsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayableCharacterInputsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayableCharacterInputsActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_PlayableCharacterInputsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Grab.started += instance.OnGrab;
                @Grab.performed += instance.OnGrab;
                @Grab.canceled += instance.OnGrab;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public PlayableCharacterInputsActions @PlayableCharacterInputs => new PlayableCharacterInputsActions(this);

    // Actions
    private readonly InputActionMap m_Actions;
    private IActionsActions m_ActionsActionsCallbackInterface;
    private readonly InputAction m_Actions_SwitchingCameras;
    private readonly InputAction m_Actions_Pause;
    public struct ActionsActions
    {
        private @GeneralInputs m_Wrapper;
        public ActionsActions(@GeneralInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchingCameras => m_Wrapper.m_Actions_SwitchingCameras;
        public InputAction @Pause => m_Wrapper.m_Actions_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
        public void SetCallbacks(IActionsActions instance)
        {
            if (m_Wrapper.m_ActionsActionsCallbackInterface != null)
            {
                @SwitchingCameras.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnSwitchingCameras;
                @SwitchingCameras.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnSwitchingCameras;
                @SwitchingCameras.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnSwitchingCameras;
                @Pause.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_ActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SwitchingCameras.started += instance.OnSwitchingCameras;
                @SwitchingCameras.performed += instance.OnSwitchingCameras;
                @SwitchingCameras.canceled += instance.OnSwitchingCameras;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public ActionsActions @Actions => new ActionsActions(this);
    public interface IPlayableCharacterInputsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnGrab(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IActionsActions
    {
        void OnSwitchingCameras(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
